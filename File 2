import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk

def select_file(entry):
    filename = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
    entry.delete(0, tk.END)
    entry.insert(0, filename)

def compare_excel_files():
    file1 = entry1.get()
    file2 = entry2.get()

    if not file1 or not file2:
        messagebox.showerror("Error", "Please select both Excel files.")
        return

    try:
        df1 = pd.read_excel(file1)
        df2 = pd.read_excel(file2)

        # Ensure both DataFrames have the same columns and index
        all_columns = list(set(df1.columns).union(set(df2.columns)))
        all_index = list(set(df1.index).union(set(df2.index)))
        df1 = df1.reindex(index=all_index, columns=all_columns, fill_value='NaN')
        df2 = df2.reindex(index=all_index, columns=all_columns, fill_value='NaN')

        # Combine the DataFrames for comparison
        combined = pd.concat([df1.add_suffix('_file1'), df2.add_suffix('_file2')], axis=1)

        # Create a DataFrame to highlight mismatches
        mismatches = (df1 != df2).astype(str)

        # Write to Excel file
        output_file = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx;*.xls")])
        if output_file:
            with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
                combined.to_excel(writer, sheet_name='Combined', index=True)

                workbook  = writer.book
                worksheet = writer.sheets['Combined']
                mismatch_format = workbook.add_format({'bg_color': 'yellow'})

                # Highlight mismatches
                for row in range(1, len(combined) + 1):
                    for col in range(len(combined.columns)):
                        cell_value = combined.iloc[row - 1, col]
                        if mismatches.iloc[row - 1, col % len(df1.columns)] == 'True':
                            worksheet.write(row, col + 1, cell_value, mismatch_format)
                        else:
                            worksheet.write(row, col + 1, cell_value)
            
            messagebox.showinfo("Success", f"Report saved to {output_file}")
        else:
            messagebox.showwarning("Cancelled", "Save operation cancelled.")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create the main application window
root = tk.Tk()
root.title("Excel File Comparator")

# Create and place widgets
frame = ttk.Frame(root, padding="10")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

label1 = ttk.Label(frame, text="Select first Excel file:")
label1.grid(row=0, column=0, sticky=tk.W)

entry1 = ttk.Entry(frame, width=50)
entry1.grid(row=0, column=1, sticky=(tk.W, tk.E))

button1 = ttk.Button(frame, text="Browse...", command=lambda: select_file(entry1))
button1.grid(row=0, column=2, sticky=tk.W)

label2 = ttk.Label(frame, text="Select second Excel file:")
label2.grid(row=1, column=0, sticky=tk.W)

entry2 = ttk.Entry(frame, width=50)
entry2.grid(row=1, column=1, sticky=(tk.W, tk.E))

button2 = ttk.Button(frame, text="Browse...", command=lambda: select_file(entry2))
button2.grid(row=1, column=2, sticky=tk.W)

compare_button = ttk.Button(frame, text="Compare", command=compare_excel_files)
compare_button.grid(row=2, column=0, columnspan=3)

# Configure resizing
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)
frame.columnconfigure(1, weight=1)

# Run the application
root.mainloop()
